const express = require('express');
const { MongoClient } = require('mongodb');
const fetch = require('node-fetch');
const router = express.Router();
const { executeAction } = require('../services/actionExecutor');
const { sendConfirmationEmail } = require('../services/emailService');
const Conversation = require('../models/Conversation');
const mongoose = require('mongoose');

const url = 'mongodb://localhost:27017';
const dbName = 'TravelPlanner';

// Fonctions MongoDB
const getHotelsFromDB = async (query) => {
  console.log('üîé [MongoDB] Recherche h√¥tels avec query:', query);
  const client = new MongoClient(url);
  try {
    await client.connect();
    const db = client.db(dbName);
    const hotelsCollection = db.collection('hotels');
    const hotels = await hotelsCollection.find(query).limit(5).toArray();
    console.log('üè® H√¥tels trouv√©s:', hotels.length);
    return hotels;
  } finally {
    await client.close();
  }
};

const getRestaurantsFromDB = async (query) => {
  console.log('üîé [MongoDB] Recherche restaurants avec query:', query);
  const client = new MongoClient(url);
  try {
    await client.connect();
    const db = client.db(dbName);
    const restaurantsCollection = db.collection('Restaurants');
    const restaurants = await restaurantsCollection.find(query).limit(5).toArray();
    console.log('üçΩÔ∏è Restaurants trouv√©s:', restaurants.length);
    return restaurants;
  } finally {
    await client.close();
  }
};

const getActivitiesFromDB = async (query) => {
  console.log('üîé [MongoDB] Recherche activit√©s avec query:', query);
  const client = new MongoClient(url);
  try {
    await client.connect();
    const db = client.db(dbName);
    const activitiesCollection = db.collection('activities');
    const activities = await activitiesCollection.find(query).limit(5).toArray();
    console.log('üé° Activit√©s trouv√©es:', activities.length);
    return activities;
  } finally {
    await client.close();
  }
};

// === FONCTIONS EXTERNES AVEC AVIATIONSTACK ===
const AVIATIONSTACK_KEY = 'ea74e13e668a4c3482becd7d53866017';

const getAirportsByCity = async (city) => {
  console.log('‚úàÔ∏è [Aviationstack] Recherche a√©roports pour la ville:', city);
  const url = `http://api.aviationstack.com/v1/airports?access_key=${AVIATIONSTACK_KEY}&city_name=${encodeURIComponent(city)}`;
  const response = await fetch(url);
  const data = await response.json();
  console.log('‚úàÔ∏è [Aviationstack] Nombre d\'a√©roports trouv√©s:', (data.data || []).length);
  return data.data || [];
};

const getFlightsByAirport = async (iata, date) => {
  console.log('üõ¨ [Aviationstack] Recherche vols pour IATA:', iata, '√† la date:', date);
  const url = `http://api.aviationstack.com/v1/flights?access_key=${AVIATIONSTACK_KEY}&arrival_iata=${iata}&flight_date=${date}`;
  const response = await fetch(url);
  const data = await response.json();
  console.log('üõ¨ [Aviationstack] Nombre de vols trouv√©s:', (data.data || []).length);
  return data.data || [];
};

const callGeminiAPI = async (userMessage) => {
  console.log('ü§ñ [Gemini] Pr√©paration de l\'appel API');
  const body = {
    contents: [{ role: 'user', parts: [{ text: userMessage }] }]
  };
  const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=AIzaSyCS_dwh4ulePklyplO82BR7ro-VhmeM4_g', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body)
  });
  if (!response.ok) {
    const error = await response.json();
    console.error('‚ùå [Gemini] Erreur API:', error);
    throw new Error(`Erreur Gemini: ${error.error.message}`);
  }
  const data = await response.json();
  console.log('‚úÖ [Gemini] R√©ponse re√ßue');
  return data.candidates?.[0]?.content?.parts?.[0]?.text || 'Aucune r√©ponse g√©n√©r√©e.';
};

// Extraction automatique de la date depuis le message
function extractDateFromMessage(message) {
  console.log('üìÖ [Date] Extraction de la date depuis le message');
  const regex = /([0-9]{4}-[0-9]{2}-[0-9]{2})|([0-9]{2}[\/-][0-9]{2}[\/-][0-9]{4})/;
  const match = message.match(regex);
  if (match) {
    let dateStr = match[0];
    if (/^[0-9]{2}[\/-][0-9]{2}[\/-][0-9]{4}$/.test(dateStr)) {
      const [day, month, year] = dateStr.split(/[\/-]/);
      dateStr = `${year}-${month}-${day}`;
    }
    console.log('üìÖ [Date] Date extraite:', dateStr);
    return dateStr;
  }
  console.log('üìÖ [Date] Aucune date trouv√©e dans le message');
  return null;
}

// D√©tection ville/quartier
function detectVilleEtQuartier(message) {
  console.log('üèôÔ∏è [Ville/Quartier] D√©tection dans le message');
  const msg = message.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
  
  const quartiersParVille = {
    Paris: [
      "batignolles", "8th Arr. - √âlys√©e", "montparnasse", "champs", "louvre", "op√©ra", "belleville", "montmartre",
      "d√©fense", "saint-germain", "charonne", "butte", "passy", "grenelle", "marais", "bastille", "la chapelle",
      "clichy", "villette", "auteuil", "trocad√©ro", "invalides", "quartier latin", "ch√¢telet"
    ],
    Madrid: [
      "salamanca", "chamber√≠", "malasa√±a", "la latina", "retiro", "centro", "arg√ºelles", "chamart√≠n", "paseo del prado"
    ],
    "New York City": [
      "manhattan", "downtown", "midtown", "hudson yards", "theater district", "brooklyn", "queens", "staten island",
      "greenwich village"
    ],
    "San Francisco": [
      "tenderloin"
    ],
    Istanbul: [
      "beyoƒülu", "sultanahmet", "taksim", "kadƒ±k√∂y", "be≈üikta≈ü"
    ],
    Casablanca: [
      "maarif", "ain diab", "anfa", "sidi maarouf", "hay hassani", "oulfa", "bouskoura", "sidi bernoussi", "casanearshore"
    ],
    Rabat: [
      "agdal", "hay riad", "souissi", "oc√©an", "youssoufia", "akkari", "medina", "salmia", "takaddoum"
    ]
  };

  for (const [ville, quartiers] of Object.entries(quartiersParVille)) {
    for (const quartier of quartiers) {
      if (msg.includes(quartier.toLowerCase())) {
        console.log(`üèôÔ∏è [Ville/Quartier] D√©tect√©: ${ville}, ${quartier}`);
        return { ville, quartier };
      }
    }
    if (msg.includes(ville.toLowerCase())) {
      console.log(`üèôÔ∏è [Ville/Quartier] D√©tect√©: ${ville}, tous les quartiers`);
      return { ville, quartier: "tous les quartiers" };
    }
  }
  console.log('‚ùå [Ville/Quartier] Aucune ville ou quartier d√©tect√©');
  return null;
}

// Principaux a√©roports en dur pour toutes les villes
const AIRPORTS_MANUAL = {
  paris: [
    { airport_name: 'Paris Charles de Gaulle', iata_code: 'CDG' },
    { airport_name: 'Paris Orly', iata_code: 'ORY' },
    { airport_name: 'Paris Beauvais', iata_code: 'BVA' }
  ],
  madrid: [
    { airport_name: 'Adolfo Su√°rez Madrid‚ÄìBarajas', iata_code: 'MAD' }
  ],
  'new york city': [
    { airport_name: 'John F. Kennedy International', iata_code: 'JFK' },
    { airport_name: 'LaGuardia', iata_code: 'LGA' },
    { airport_name: 'Newark Liberty International', iata_code: 'EWR' }
  ],
  'san francisco': [
    { airport_name: 'San Francisco International', iata_code: 'SFO' },
    { airport_name: 'Oakland International', iata_code: 'OAK' }
  ],
  istanbul: [
    { airport_name: 'Istanbul Airport', iata_code: 'IST' },
    { airport_name: 'Sabiha Gokcen', iata_code: 'SAW' }
  ],
  casablanca: [
    { airport_name: 'Mohammed V International', iata_code: 'CMN' }
  ],
  rabat: [
    { airport_name: 'Rabat‚ÄìSal√© Airport', iata_code: 'RBA' }
  ]
};

// Fonction pour calculer la dur√©e du s√©jour
const calculateStayDuration = (departureDate, arrivalDate) => {
  if (!departureDate || !arrivalDate) return 0; // Retourner 0 si pas de dates sp√©cifi√©es
  
  const start = new Date(departureDate);
  const end = new Date(arrivalDate);
  
  // V√©rifier que les dates sont valides
  if (isNaN(start.getTime()) || isNaN(end.getTime())) return 0;
  if (start > end) return 0; // Si la date de d√©part est apr√®s la date d'arriv√©e
  
  // Calculer la diff√©rence en jours
  const diffTime = end.getTime() - start.getTime();
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  
  // Retourner la dur√©e calcul√©e
  return diffDays > 0 ? diffDays : 0;
};

// Fonction pour g√©n√©rer un itin√©raire dynamique
const generateDynamicItinerary = (duration) => {
  if (duration <= 0) return {}; // Retourner un itin√©raire vide si la dur√©e est invalide
  
  const itinerary = {};
  for (let i = 1; i <= duration; i++) {
    itinerary[`day${i}`] = {
      morning: {
        activities: ["√Ä planifier"],
        local_tips: "Journ√©e √† personnaliser selon vos pr√©f√©rences",
        hidden_gems: "D√©couvrez les quartiers moins touristiques"
      },
      afternoon: {
        activities: ["√Ä planifier"],
        local_tips: "Journ√©e √† personnaliser selon vos pr√©f√©rences",
        hidden_gems: "Explorez les caf√©s et restaurants locaux"
      },
      evening: {
        activities: ["√Ä planifier"],
        local_tips: "Journ√©e √† personnaliser selon vos pr√©f√©rences",
        hidden_gems: "Profitez de l\'ambiance nocturne parisienne"
      }
    };
  }
  return itinerary;
};

// Nouvelle fonction pour le Chain of Thought Reasoning
const chainOfThoughtReasoning = async (userMessage, context) => {
  console.log('üß† [ChainOfThought] D√©but de la r√©flexion pour:', userMessage);
  
  // Calculer la dur√©e du s√©jour
  const duration = calculateStayDuration(context.departureDate, context.arrivalDate);
  if (duration <= 0) {
    console.log('‚ö†Ô∏è Dur√©e de s√©jour invalide:', duration);
    return {
      response: "D√©sol√©, les dates fournies ne sont pas valides. Veuillez v√©rifier que la date de retour est apr√®s la date de d√©part.",
      reasoning: {
        steps: [],
        suggested_itinerary: {},
        hotel_suggestions: {},
        restaurant_suggestions: {},
        local_experiences: {}
      }
    };
  }

  const dynamicItinerary = generateDynamicItinerary(duration);
  
  const prompt = `En tant qu'expert voyage passionn√© et cr√©atif, analysez la demande suivante et cr√©ez une exp√©rience de voyage unique et m√©morable :
  Message: "${userMessage}"
  Contexte: ${JSON.stringify(context)}
  Dur√©e du s√©jour: ${duration} jours
  
  IMPORTANT: Vous DEVEZ g√©n√©rer un itin√©raire pour EXACTEMENT ${duration} jours. Chaque jour doit avoir des activit√©s pour le matin, l'apr√®s-midi et le soir.
  L'itin√©raire doit √™tre structur√© comme suit:
  {
    "day1": { "morning": {...}, "afternoon": {...}, "evening": {...} },
    "day2": { "morning": {...}, "afternoon": {...}, "evening": {...} },
    ...
    "day${duration}": { "morning": {...}, "afternoon": {...}, "evening": {...} }
  }
  
  R√©pondez UNIQUEMENT avec un objet JSON valide, sans backticks ni marqueurs de code. Format attendu :
  {
    "response": "Une r√©ponse captivante et personnalis√©e qui raconte une histoire de voyage, incluant des anecdotes locales, des conseils d'expert et des suggestions uniques",
    "reasoning": {
      "steps": [
        {
          "action": "recherche_hotels",
          "criteria": ["crit√®re1", "crit√®re2"],
          "priority": 1,
          "personalization": "Comment adapter les crit√®res aux pr√©f√©rences du voyageur"
        },
        {
          "action": "recherche_activites",
          "criteria": ["crit√®re1", "crit√®re2"],
          "priority": 2,
          "personalization": "Comment cr√©er une exp√©rience authentique et locale"
        }
      ],
      "suggested_itinerary": ${JSON.stringify(dynamicItinerary)},
      "hotel_suggestions": {
        "budget": {
          "options": ["h√¥tel1", "h√¥tel2"],
          "local_insights": "Pourquoi ces h√¥tels sont uniques",
          "neighborhood_tips": "Conseils sur le quartier"
        },
        "mid_range": {
          "options": ["h√¥tel1", "h√¥tel2"],
          "local_insights": "Pourquoi ces h√¥tels sont uniques",
          "neighborhood_tips": "Conseils sur le quartier"
        },
        "luxury": {
          "options": ["h√¥tel1", "h√¥tel2"],
          "local_insights": "Pourquoi ces h√¥tels sont uniques",
          "neighborhood_tips": "Conseils sur le quartier"
        }
      },
      "restaurant_suggestions": {
        "breakfast": {
          "options": ["restaurant1", "restaurant2"],
          "specialties": "Plats typiques √† ne pas manquer",
          "local_etiquette": "Conseils sur les usages locaux"
        },
        "lunch": {
          "options": ["restaurant1", "restaurant2"],
          "specialties": "Plats typiques √† ne pas manquer",
          "local_etiquette": "Conseils sur les usages locaux"
        },
        "dinner": {
          "options": ["restaurant1", "restaurant2"],
          "specialties": "Plats typiques √† ne pas manquer",
          "local_etiquette": "Conseils sur les usages locaux"
        }
      },
      "local_experiences": {
        "cultural_insights": ["Exp√©rience culturelle 1", "Exp√©rience culturelle 2"],
        "hidden_gems": ["Endroit secret 1", "Endroit secret 2"],
        "seasonal_events": ["√âv√©nement 1", "√âv√©nement 2"]
      }
    }
  }`;

  try {
    const response = await callGeminiAPI(prompt);
    // Nettoyer la r√©ponse pour enlever les backticks et les marqueurs de code
    const cleanedResponse = response
      .replace(/```json\s*/g, '')  // Enlever ```json
      .replace(/```\s*/g, '')      // Enlever ```
      .replace(/^\s*{\s*/, '{')    // Nettoyer les espaces au d√©but
      .replace(/\s*}\s*$/, '}');   // Nettoyer les espaces √† la fin
    
    console.log('üß† R√©ponse nettoy√©e:', cleanedResponse);
    const parsedResponse = JSON.parse(cleanedResponse);

    // V√©rifier et ajuster l'itin√©raire si n√©cessaire
    let suggestedItinerary = parsedResponse.reasoning?.suggested_itinerary || dynamicItinerary;
    
    // S'assurer que l'itin√©raire a le bon nombre de jours
    if (Object.keys(suggestedItinerary).length !== duration) {
      console.log(`‚ö†Ô∏è Ajustement de l'itin√©raire: ${Object.keys(suggestedItinerary).length} jours trouv√©s, ${duration} jours requis`);
      
      // Si l'itin√©raire a moins de jours que requis, ajouter les jours manquants
      for (let i = Object.keys(suggestedItinerary).length + 1; i <= duration; i++) {
        suggestedItinerary[`day${i}`] = {
          morning: {
            activities: ["√Ä planifier"],
            local_tips: "Journ√©e √† personnaliser selon vos pr√©f√©rences",
            hidden_gems: "D√©couvrez les quartiers moins touristiques"
          },
          afternoon: {
            activities: ["√Ä planifier"],
            local_tips: "Journ√©e √† personnaliser selon vos pr√©f√©rences",
            hidden_gems: "Explorez les caf√©s et restaurants locaux"
          },
          evening: {
            activities: ["√Ä planifier"],
            local_tips: "Journ√©e √† personnaliser selon vos pr√©f√©rences",
            hidden_gems: "Profitez de l'ambiance nocturne parisienne"
          }
        };
      }
    }

    // Si l'itin√©raire a plus de jours que requis, supprimer les jours en trop
    if (Object.keys(suggestedItinerary).length > duration) {
      console.log(`‚ö†Ô∏è Suppression des jours en trop: ${Object.keys(suggestedItinerary).length} jours trouv√©s, ${duration} jours requis`);
      const daysToKeep = Object.keys(suggestedItinerary).slice(0, duration);
      const newItinerary = {};
      daysToKeep.forEach(day => {
        newItinerary[day] = suggestedItinerary[day];
      });
      suggestedItinerary = newItinerary;
    }

    // V√©rifier et compl√©ter la structure si n√©cessaire
    return {
      response: parsedResponse.response || "Je n'ai pas pu g√©n√©rer une r√©ponse appropri√©e.",
      reasoning: {
        steps: parsedResponse.reasoning?.steps || [],
        suggested_itinerary: suggestedItinerary,
        hotel_suggestions: parsedResponse.reasoning?.hotel_suggestions || {
          budget: { options: [], local_insights: "", neighborhood_tips: "" },
          mid_range: { options: [], local_insights: "", neighborhood_tips: "" },
          luxury: { options: [], local_insights: "", neighborhood_tips: "" }
        },
        restaurant_suggestions: parsedResponse.reasoning?.restaurant_suggestions || {
          breakfast: { options: [], specialties: "", local_etiquette: "" },
          lunch: { options: [], specialties: "", local_etiquette: "" },
          dinner: { options: [], specialties: "", local_etiquette: "" }
        },
        local_experiences: parsedResponse.reasoning?.local_experiences || {
          cultural_insights: [],
          hidden_gems: [],
          seasonal_events: []
        }
      }
    };
  } catch (error) {
    console.error('‚ùå [ChainOfThought] Erreur lors de la r√©flexion:', error);
    // En cas d'erreur, retourner une structure par d√©faut avec l'itin√©raire dynamique
    return {
      response: "Je suis d√©sol√©, je n'ai pas pu traiter votre demande correctement. Veuillez r√©essayer.",
      reasoning: {
        steps: [
          {
            action: "recherche_hotels",
            criteria: ["tous"],
            priority: 1,
            personalization: "Recherche d'h√¥tels adapt√©s √† tous les budgets"
          },
          {
            action: "recherche_activites",
            criteria: ["tous"],
            priority: 2,
            personalization: "Recherche d'activit√©s pour tous les go√ªts"
          }
        ],
        suggested_itinerary: dynamicItinerary,
        hotel_suggestions: {
          budget: {
            options: ["H√¥tel Turenne Le Marais", "citizenM Paris Gare de Lyon"],
            local_insights: "H√¥tels avec une excellente localisation",
            neighborhood_tips: "Quartiers anim√©s et bien desservis"
          },
          mid_range: {
            options: ["Secret de Paris - Hotel & Spa", "B Montmartre Hotel"],
            local_insights: "H√¥tels avec charme et confort",
            neighborhood_tips: "Quartiers authentiques et pittoresques"
          },
          luxury: {
            options: ["Le Bristol Paris", "H√¥tel Plaza Ath√©n√©e"],
            local_insights: "H√¥tels de luxe avec service exceptionnel",
            neighborhood_tips: "Quartiers prestigieux et √©l√©gants"
          }
        },
        restaurant_suggestions: {
          breakfast: {
            options: ["Caf√© de Flore", "Ladur√©e"],
            specialties: "P√¢tisseries fran√ßaises traditionnelles",
            local_etiquette: "Le petit-d√©jeuner √† la fran√ßaise"
          },
          lunch: {
            options: ["Le Petit Bistrot", "Chez Janou"],
            specialties: "Cuisine fran√ßaise authentique",
            local_etiquette: "Le d√©jeuner √† la fran√ßaise"
          },
          dinner: {
            options: ["Le Grand V√©four", "L'Ami Louis"],
            specialties: "Gastronomie fran√ßaise raffin√©e",
            local_etiquette: "Le d√Æner √† la fran√ßaise"
          }
        },
        local_experiences: {
          cultural_insights: ["March√©s locaux", "Visites guid√©es insolites"],
          hidden_gems: ["Passages couverts", "Jardins secrets"],
          seasonal_events: ["Festivals locaux", "√âv√©nements culturels"]
        }
      }
    };
  }
};

// Nouvelle fonction pour la gestion des actions
const handleUserAction = async (action, params) => {
  console.log('‚ö° [ActionEngine] Ex√©cution de l\'action:', action, params);
  
  try {
    switch (action) {
      case 'book_hotel':
        return await executeAction('bookHotel', params);
      case 'search_hotels':
        return await executeAction('searchHotels', params);
      case 'search_activities':
        return await executeAction('searchActivities', params);
      default:
        throw new Error(`Action non reconnue: ${action}`);
    }
  } catch (error) {
    console.error('‚ùå [ActionEngine] Erreur lors de l\'ex√©cution:', error);
    throw error;
  }
};

// Function to parse structured travel messages
const parseTravelMessage = (message) => {
  console.log('üîç [Parser] Analyzing message:', message);
  
  // Pattern: "Voyage de [departure] √† [arrival] du [departure_date] au [arrival_date]"
  const pattern = /Voyage de (.*?) √† (.*?) du (.*?) au (.*?)$/;
  const match = message.match(pattern);
  
  if (match) {
    const [_, departureLocation, arrivalLocation, departureDate, arrivalDate] = match;
    console.log('‚úÖ [Parser] Travel details extracted:', {
      departureLocation,
      arrivalLocation,
      departureDate,
      arrivalDate
    });
    return {
      departureLocation: departureLocation.trim(),
      arrivalLocation: arrivalLocation.trim(),
      departureDate: departureDate.trim(),
      arrivalDate: arrivalDate.trim()
    };
  }
  
  console.log('‚ùå [Parser] No structured travel message pattern found');
  return null;
};

// Fonction de d√©tection de requ√™te ill√©gale (insensible √† la casse et aux accents)
function isIllegalRequest(message) {
  const illegalKeywords = [
    'pirater', 'faux passeport', 'drogue', 'arnaque', 'hack', 'ill√©gal', 'ill√©gale', 'terrorisme', 'crime'
  ];
  if (!message) return false;
  // Supprime les accents et met en minuscule
  const lowerMsg = message.normalize('NFD').replace(/[\u0300-\u036f]/g, '').toLowerCase();
  return illegalKeywords.some(keyword => lowerMsg.includes(keyword));
}

// Route principale pour le chat
router.post('/', async (req, res) => {
  let { message, dateVoyage, origin, userId } = req.body;
  console.log('üìù Message re√ßu:', message);
  console.log('üë§ UserId re√ßu:', userId);
  
  // Log the full request body to see what is received from frontend
  console.log('üîç Req body received:', req.body);

  if (!message) return res.status(400).json({ error: 'Message requis' });

  // Validation de l'userId
  if (!userId) {
    // G√©n√©rer un nouvel userId si non fourni
    userId = new mongoose.Types.ObjectId();
    console.log('üÜï Nouvel userId g√©n√©r√©:', userId);
  }

  // Filtre anti-action ill√©gale (tout en haut)
  if (isIllegalRequest(message)) {
    return res.status(403).json({
      response: "Je suis d√©sol√©, je ne peux pas vous aider pour cette demande."
    });
  }

  // Convertir l'userId en ObjectId
  let userObjectId;
  try {
    userObjectId = new mongoose.Types.ObjectId(userId);
    console.log('‚úÖ userId converti en ObjectId:', userObjectId);
  } catch (e) {
    console.error('‚ùå Erreur conversion userId en ObjectId:', e);
    // Si l'userId n'est pas un format valide, en g√©n√©rer un nouveau
    userObjectId = new mongoose.Types.ObjectId();
    console.log('üÜï Nouvel ObjectId g√©n√©r√©:', userObjectId);
  }

  try {
    // 1. Extraction des informations de base
    let departureDate, arrivalDate;
    const travelDetails = parseTravelMessage(message);
    if (travelDetails) {
      departureDate = travelDetails.departureDate;
      arrivalDate = travelDetails.arrivalDate;
      console.log('üìÖ Dates extraites:', { departureDate, arrivalDate });
    } else if (!dateVoyage) {
      dateVoyage = extractDateFromMessage(message);
      if (dateVoyage) {
        console.log('üìÖ Date de voyage d√©tect√©e automatiquement:', dateVoyage);
        departureDate = dateVoyage;
        // Par d√©faut, on consid√®re un s√©jour de 3 jours si pas de date de retour sp√©cifi√©e
        const endDate = new Date(dateVoyage);
        endDate.setDate(endDate.getDate() + 3);
        arrivalDate = endDate.toISOString().split('T')[0];
      }
    }

    const result = detectVilleEtQuartier(message);
    if (!result) {
      console.log('‚ùå Ville ou quartier non d√©tect√© dans le message');
      return res.status(200).json({
        response: `Je n'ai pas identifi√© de quartier ou de ville. Essayez par exemple : "Que faire √† Montmartre", "H√¥tels √† Manhattan", ou "Activit√©s √† Taksim".`,
        userId: userObjectId.toString() // Retourner l'userId pour le frontend
      });
    }

    const { ville, quartier } = result;
    console.log(`‚úÖ Ville d√©tect√©e: ${ville}, Quartier d√©tect√©: ${quartier}`);

    // 2. Chain of Thought Reasoning
    const context = {
      ville,
      quartier,
      departureDate,
      arrivalDate,
      dateVoyage,
      origin,
      userId: userObjectId.toString() // Ajouter l'userId au contexte
    };
    
    const reasoning = await chainOfThoughtReasoning(message, context);
    console.log('üß† R√©sultat de la r√©flexion:', reasoning);

    // D√©finir les requ√™tes pour MongoDB
    let hotelQuery = {};
    let restaurantQuery = {};
    let activityQuery = {};

    if (quartier === "tous les quartiers") {
      hotelQuery = {
        $or: [
          { 'data.data.title': new RegExp(ville, 'i') },
          { 'data.data.secondaryInfo': new RegExp(ville, 'i') }
        ]
      };
      restaurantQuery = {
        $or: [
          { 'data.restaurants.name': new RegExp(ville, 'i') }
        ]
      };
      activityQuery = {
        $or: [
          { 'data.products.name': new RegExp(ville, 'i') }
        ]
      };
      console.log('üîç Recherche pour tous les quartiers √†:', ville);
    } else {
      hotelQuery = {
        $or: [
          { 'data.data.title': new RegExp(quartier, 'i') },
          { 'data.data.secondaryInfo': new RegExp(quartier, 'i') }
        ]
      };
      restaurantQuery = {
        $or: [
          { 'data.restaurants.name': new RegExp(quartier, 'i') }
        ]
      };
      activityQuery = {
        $or: [
          { 'data.products.name': new RegExp(quartier, 'i') }
        ]
      };
      console.log(`üîç Recherche pour le quartier ${quartier} √† ${ville}`);
    }

    // 3. Ex√©cution des actions en parall√®le
    const [hotels, restaurants, activities, airports] = await Promise.all([
      getHotelsFromDB(hotelQuery),
      getRestaurantsFromDB(restaurantQuery),
      getActivitiesFromDB(activityQuery),
      getAirportsByCity(ville)
    ]);

    // 4. Formatage des donn√©es
    const formattedHotels = hotels.flatMap(hotel => {
      if (!hotel || !hotel.data) return [];
      const hotelData = Array.isArray(hotel.data) ? hotel.data : [hotel.data];
      return hotelData.flatMap(data => {
        if (!data || !data.data) return [];
        const items = Array.isArray(data.data) ? data.data : [data.data];
        return items.map(h => ({
          name: h.title?.trim() || '',
          location: h.secondaryInfo?.trim() || '',
          price: h.priceForDisplay || 'Prix non communiqu√©',
          description: h.priceSummary || 'Pas de description',
        }));
      });
    });

    const formattedRestaurants = restaurants.flatMap(r => {
      if (!r || !r.data) return [];
      const restaurantData = Array.isArray(r.data) ? r.data : [r.data];
      return restaurantData.flatMap(data => {
        if (!data || !data.restaurants) return [];
        const items = Array.isArray(data.restaurants) ? data.restaurants : [data.restaurants];
        return items.map(resto => ({
          name: resto.name || '',
          rating: resto.averageRating || 'Non not√©',
          price: resto.priceTag || 'Prix non communiqu√©',
          cuisine: (resto.establishmentTypeAndCuisineTags || []).join(', ') || 'Non sp√©cifi√©',
          url: resto.menuUrl || '',
          status: resto.currentOpenStatus || 'Statut inconnu'
        }));
      });
    });

    const formattedActivities = activities.flatMap(a => {
      if (!a || !a.data) return [];
      const activityData = Array.isArray(a.data) ? a.data : [a.data];
      return activityData.flatMap(data => {
        if (!data || !data.products) return [];
        const items = Array.isArray(data.products) ? data.products : [data.products];
        return items.map(act => ({
          name: act.name || '',
          description: act.shortDescription || 'Pas de description',
          price: act.representativePrice?.publicAmount || 'Prix non communiqu√©',
          currency: act.representativePrice?.currency || ''
        }));
      });
    });

    console.log('üè® H√¥tels format√©s:', formattedHotels.length);
    console.log('üçΩÔ∏è Restaurants format√©s:', formattedRestaurants.length);
    console.log('üé° Activit√©s format√©es:', formattedActivities.length);

    // Recherche a√©roports destination
    let filteredAirports = airports.filter(a =>
      a.city_name && a.city_name.toLowerCase().includes(ville.toLowerCase())
    );

    if (!filteredAirports.length && airports.length) {
      filteredAirports = airports.filter(a =>
        (a.airport_name && a.airport_name.toLowerCase().includes(ville.toLowerCase())) ||
        (a.country_name && a.country_name.toLowerCase().includes(ville.toLowerCase()))
      );
    }

    let airportsWarning = '';
    if (!filteredAirports.length && airports.length) {
      airportsWarning = `‚ö†Ô∏è Aucun a√©roport trouv√© pour la ville "${ville}" dans les r√©sultats. Voici la liste brute retourn√©e par l'API :\n`;
      filteredAirports = airports;
    }
    if (!filteredAirports.length && AIRPORTS_MANUAL[ville.toLowerCase()]) {
      airportsWarning = `‚ö†Ô∏è Aucun a√©roport trouv√© pour "${ville}" dans l'API. Voici les principaux a√©roports ajout√©s manuellement :\n`;
      filteredAirports = AIRPORTS_MANUAL[ville.toLowerCase()];
    }
    console.log('‚úàÔ∏è A√©roports filtr√©s:', filteredAirports.length);

    // Recherche a√©roports de d√©part si origin fourni
    let originAirports = [];
    let originAirportsWarning = '';
    if (origin) {
      let airportsOriginRaw = await getAirportsByCity(origin);
      console.log('üõ´ A√©roports bruts trouv√©s pour origin:', airportsOriginRaw.length);
      
      originAirports = airportsOriginRaw.filter(a =>
        a.city_name && a.city_name.toLowerCase().includes(origin.toLowerCase())
      );

      if (!originAirports.length && airportsOriginRaw.length) {
        originAirports = airportsOriginRaw.filter(a =>
          (a.airport_name && a.airport_name.toLowerCase().includes(origin.toLowerCase())) ||
          (a.country_name && a.country_name.toLowerCase().includes(origin.toLowerCase()))
        );
      }

      if (!originAirports.length && airportsOriginRaw.length) {
        originAirportsWarning = `‚ö†Ô∏è Aucun a√©roport trouv√© pour la ville "${origin}" dans les r√©sultats. Voici la liste brute retourn√©e par l'API :\n`;
        originAirports = airportsOriginRaw;
      }

      if (!originAirports.length && AIRPORTS_MANUAL[origin.toLowerCase()]) {
        originAirportsWarning = `‚ö†Ô∏è Aucun a√©roport trouv√© pour "${origin}" dans l'API. Voici les principaux a√©roports ajout√©s manuellement :\n`;
        originAirports = AIRPORTS_MANUAL[origin.toLowerCase()];
      }
      console.log('üõ´ A√©roports filtr√©s pour origin:', originAirports.length);
    }

    // Recherche vols si date et a√©roports trouv√©s
    let flights = [];
    if (filteredAirports.length && dateVoyage) {
      const destIata = filteredAirports[0].iata_code;
      flights = await getFlightsByAirport(destIata, dateVoyage);
      console.log('üõ¨ Vols trouv√©s:', flights.length);
    }

    // 5. Construction du prompt final avec l'itin√©raire sugg√©r√©
    const duration = calculateStayDuration(departureDate, arrivalDate);
    console.log(`üìÖ Dur√©e du s√©jour calcul√©e: ${duration} jours`);

    const prompt = `En tant qu'assistant de voyage SAMWay, cr√©ez un plan de voyage d√©taill√© pour ${ville} dans le quartier ${quartier}. Structurez votre r√©ponse comme un v√©ritable plan de voyage avec des conseils pratiques.

PLAN DE VOYAGE - ${ville} (${quartier})
=====================================

IMPORTANT: Vous DEVEZ g√©n√©rer un itin√©raire pour EXACTEMENT ${duration} jours. Chaque jour doit avoir des activit√©s pour le matin, l'apr√®s-midi et le soir.

1. ARRIV√âE
----------
- A√©roport d'arriv√©e : [S√©lectionner parmi les a√©roports disponibles]
- Transport depuis l'a√©roport : [Options de transport recommand√©es]
- Dur√©e estim√©e du trajet : [Temps de trajet]

2. H√âBERGEMENT
-------------
- H√¥tel recommand√© : [Nom de l'h√¥tel] (cat√©gorie)
- Localisation : [Quartier/Adresse]
- Points forts : [Pourquoi ce choix est id√©al]
- Prix par nuit : [Montant]

3. ITIN√âRAIRE JOUR PAR JOUR (${duration} jours)
--------------------------
${Array.from({length: duration}, (_, i) => `Jour ${i + 1} :
- Matin : [Activit√© 1] - [Conseils pratiques]
- Apr√®s-midi : [Activit√© 2] - [Conseils pratiques]
- Soir√©e : [Activit√© 3] - [Conseils pratiques]`).join('\n\n')}

4. RESTAURATION
--------------
- Petit-d√©jeuner : [Restaurant 1] - [Sp√©cialit√©]
- D√©jeuner : [Restaurant 2] - [Sp√©cialit√©]
- D√Æner : [Restaurant 3] - [Sp√©cialit√©]

5. BUDGET ESTIM√â
---------------
- H√©bergement : [Montant] (${duration} nuits)
- Activit√©s : [Montant]
- Restauration : [Montant]
- Transport : [Montant]
Total : [Montant total] ‚Ç¨ pour ${duration} jours

6. CONSEILS PRATIQUES
--------------------
- Meilleure p√©riode pour visiter : [P√©riode]
- √Ä ne pas oublier : [Liste d'objets essentiels]
- Conseils locaux : [Astuces pratiques]
- Transports locaux : [Options recommand√©es]

Voulez-vous que je proc√®de √† la r√©servation ? ‚úÖ/‚ùå

Utilisez les donn√©es suivantes pour cr√©er ce plan de voyage :

A√©roports disponibles :
${filteredAirports.length ? filteredAirports.map(a => `- ${a.airport_name} (${a.iata_code})`).join('\n') : 'Aucun a√©roport trouv√©'}

H√¥tels disponibles :
${formattedHotels.length ? formattedHotels.map(h => `- ${h.name} (${h.location}) | ${h.price} | ${h.description}`).join('\n') : 'Aucun h√¥tel trouv√©'}

Restaurants disponibles :
${formattedRestaurants.length ? formattedRestaurants.map(r => `- ${r.name} | ${r.cuisine} | ${r.price} | ${r.status}`).join('\n') : 'Aucun restaurant trouv√©'}

Activit√©s disponibles :
${formattedActivities.length ? formattedActivities.map(a => `- ${a.name} | ${a.description} | ${a.price} ${a.currency || ''}`).join('\n') : 'Aucune activit√© trouv√©e'}

${dateVoyage ? `Vols disponibles pour le ${dateVoyage} :
${flights.length ? flights.slice(0, 5).map(f => `- ${f.flight?.iata || ''} | ${f.departure?.airport || ''} ‚Üí ${f.arrival?.airport || ''} | ${f.airline?.name || ''}`).join('\n') : 'Aucun vol trouv√©'}` : ''}

Assurez-vous de :
1. Cr√©er un plan de voyage clair et structur√©
2. Inclure des conseils pratiques pour chaque activit√©
3. Fournir des informations d√©taill√©es sur les transports
4. Donner des conseils locaux utiles
5. Calculer un budget r√©aliste
6. Suivre EXACTEMENT le format demand√©
7. G√©n√©rer un itin√©raire pour EXACTEMENT ${duration} jours`;

    // 6. Appel √† l'API Gemini avec le nouveau prompt
    const responseText = await callGeminiAPI(prompt);
    console.log('üéâ R√©ponse de Gemini:', responseText);

    // 7. Envoi de la r√©ponse avec les donn√©es n√©cessaires pour les actions
    const response = { 
      response: responseText,
      userId: userObjectId.toString(), // Ajouter l'userId √† la r√©ponse
      reasoning: {
        steps: reasoning.steps,
        suggested_itinerary: reasoning.suggested_itinerary,
        hotel_suggestions: reasoning.hotel_suggestions,
        restaurant_suggestions: reasoning.restaurant_suggestions,
        local_experiences: {
          cultural_insights: ["March√©s locaux", "Visites guid√©es insolites"],
          hidden_gems: ["Passages couverts", "Jardins secrets"],
          seasonal_events: ["Festivals locaux", "√âv√©nements culturels"]
        }
      },
      data: {
        hotels: Array.isArray(formattedHotels) ? formattedHotels : [],
        restaurants: Array.isArray(formattedRestaurants) ? formattedRestaurants : [],
        activities: Array.isArray(formattedActivities) ? formattedActivities : [],
        airports: Array.isArray(filteredAirports) ? filteredAirports : [],
        flights: Array.isArray(flights) ? flights.slice(0, 5) : []
      }
    };

    // Sauvegarder la conversation avec le nouvel userId
    try {
      console.log('Attempting to save conversation for userId ObjectId:', userObjectId);
      
      // Generate a simple title for the conversation
      const conversationTitle = ville ? `Voyage √† ${ville}` : message.substring(0, Math.min(message.length, 50)) + '...';

      // Cr√©er ou mettre √† jour la conversation
      const conversation = await Conversation.findOneAndUpdate(
        { userId: userObjectId },
        {
          $push: {
            messages: {
              role: 'user',
              text: message,
              timestamp: new Date()
            }
          },
          $set: {
            detectedCity: ville || '',
            departureLocation: origin || '',
            arrivalLocation: ville || '',
            departureDate: departureDate || '',
            arrivalDate: arrivalDate || '',
            updatedAt: new Date(),
            title: conversationTitle
          }
        },
        { upsert: true, new: true }
      );
      console.log('User message saved. Conversation ID:', conversation?._id);

      // Ajouter la r√©ponse du bot √† la conversation
      await Conversation.findByIdAndUpdate(
        conversation._id,
        {
          $push: {
            messages: {
              role: 'bot',
              text: responseText,
              data: response.data,
              reasoning: response.reasoning,
              timestamp: new Date()
            }
          }
        }
      );
      console.log('Bot message added to conversation.');
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde de la conversation:', error);
    }

    res.status(200).json(response);

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des donn√©es:', error);
    res.status(500).json({ 
      error: 'Erreur serveur',
      userId: userObjectId.toString() // Inclure l'userId m√™me en cas d'erreur
    });
  }
});

// Route pour ex√©cuter une action utilisateur (ex: r√©servation d'h√¥tel)
router.post('/action', async (req, res) => {
  const { action, params } = req.body;
  if (!action) return res.status(400).json({ error: 'Action requise' });

  try {
    const result = await handleUserAction(action, params);
    res.status(200).json({ success: true, result });
  } catch (error) {
    console.error('‚ùå [ActionEngine] Erreur lors de l\'ex√©cution de l\'action:', error);
    res.status(500).json({ error: 'Erreur lors de l\'ex√©cution de l\'action' });
  }
});

// Nouvelle route pour g√©rer les actions de r√©servation
router.post('/reservation-action', async (req, res) => {
  const { action, params, message, modification } = req.body;
  console.log('üìù Action de r√©servation re√ßue:', action);

  // Filtre anti-action ill√©gale
  if (isIllegalRequest(message)) {
    return res.status(403).json({
      response: "Je suis d√©sol√©, je ne peux pas vous aider pour cette demande."
    });
  }

  try {
    if (action === 'confirm') {
      // Situation 1: Confirmation de r√©servation
      console.log('‚úÖ Confirmation de r√©servation demand√©e');
      
      // 1. Pr√©paration des param√®tres de r√©servation
      let bookingParams = { ...params };
      if (params.dateVoyage) {
        bookingParams.checkIn = params.dateVoyage;
        const inDate = new Date(params.dateVoyage);
        const outDate = new Date(inDate.getTime() + 3 * 24 * 60 * 60 * 1000); // +3 jours par d√©faut
        bookingParams.checkOut = outDate.toISOString().slice(0, 10);
      }

      // 2. Ex√©cution de la r√©servation
      const bookingResult = await executeAction('bookHotel', bookingParams);
      console.log('üè® R√©servation effectu√©e:', bookingResult);

      // 3. Envoi de l'email de confirmation
      const tripSummary = `
        <h3>D√©tails de votre s√©jour</h3>
        <p>H√¥tel: ${bookingParams.hotelName}</p>
        <p>Dates: ${bookingParams.checkIn} au ${bookingParams.checkOut}</p>
        <p>Prix total: ${bookingResult.totalPrice}</p>
      `;
      
      await sendConfirmationEmail(
        bookingParams.userEmail,
        tripSummary,
        bookingParams.departureLocation || bookingParams.departure || '',
        bookingParams.arrivalLocation || bookingParams.destination || '',
        bookingParams.userName || ''
      );
      console.log('üìß Email de confirmation envoy√©');

      return res.status(200).json({
        success: true,
        result: bookingResult,
        emailSent: true,
        userEmail: bookingParams.userEmail
      });

    } else if (action === 'refuse') {
      console.log('Refus de la proposition');
      
      // 1. R√©cup√©rer les dates depuis params ou g√©n√©rer par d√©faut
      let departureDate = params?.departureDate;
      let arrivalDate = params?.arrivalDate;

      // Si aucune date, g√©n√©rer par d√©faut (aujourd'hui + 3 jours)
      if (!departureDate) {
        const today = new Date();
        departureDate = today.toISOString().slice(0, 10);
        const outDate = new Date(today.getTime() + 3 * 24 * 60 * 60 * 1000);
        arrivalDate = outDate.toISOString().slice(0, 10);
      } else if (!arrivalDate) {
        const inDate = new Date(departureDate);
        const outDate = new Date(inDate.getTime() + 3 * 24 * 60 * 60 * 1000);
        arrivalDate = outDate.toISOString().slice(0, 10);
      }

      // 2. Cr√©ation du contexte pour le nouveau raisonnement
      const context = {
        ...params,
        previousRejection: true,
        rejectionReason: message,
        departureDate,
        arrivalDate
      };

      // 3. Relancement du raisonnement avec le nouveau contexte
      const reasoning = await chainOfThoughtReasoning(message, context);
      console.log('üß† Nouveau raisonnement effectu√©');

      return res.status(200).json({
        response: reasoning.response || "D'accord, je vous propose d'autres options !",
        reasoning: reasoning.reasoning || {},
        data: {}
      });

    } else if (action === 'modify') {
      // Situation 3: Modification de la proposition
      console.log('üîÑ Modification de la proposition');
      
      // 1. R√©cup√©rer les dates depuis modification OU params
      let departureDate = modification?.departureDate || params?.departureDate;
      let arrivalDate = modification?.arrivalDate || params?.arrivalDate;

      // Si l'utilisateur a mis une nouvelle date unique (ex: 'newDates'), on peut l'utiliser pour les deux
      if (modification?.newDates) {
        departureDate = modification.newDates;
        // Par d√©faut, +3 jours
        const inDate = new Date(modification.newDates);
        const outDate = new Date(inDate.getTime() + 3 * 24 * 60 * 60 * 1000);
        arrivalDate = outDate.toISOString().slice(0, 10);
      }

      const context = {
        ...params,
        ...modification,
        departureDate,
        arrivalDate,
        previousProposal: params,
        modificationReason: message
      };

      // 2. Relancement du raisonnement avec les nouveaux param√®tres
      const reasoning = await chainOfThoughtReasoning(message, context);
      console.log('üß† Nouveau raisonnement avec modifications');

      // 3. Envoi d'un email de modification si userEmail pr√©sent
      const userEmail = params.userEmail || modification?.userEmail;
      if (userEmail) {
        const modificationSummary = `
          <h3>Votre demande de modification a bien √©t√© prise en compte !</h3>
          <p>Message : ${message}</p>
          <p>Nouvelle proposition : ${reasoning.response}</p>
        `;
        await sendConfirmationEmail(
          userEmail,
          modificationSummary,
          params.departureLocation || params.departure || '',
          params.arrivalLocation || params.destination || '',
          params.userName || ''
        );
        console.log('üìß Email de modification envoy√©');
      }

      return res.status(200).json({
        response: reasoning.response || "Voici un nouvel itin√©raire adapt√© √† vos modifications.",
        reasoning: reasoning.reasoning || {},
        data: {},
        emailSent: !!params.userEmail
      });

    } else {
      console.log('‚ùå Action inconnue:', action);
      return res.status(400).json({ error: 'Action inconnue' });
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du traitement de la r√©servation:', error);
    res.status(500).json({ error: 'Erreur lors du traitement de la r√©servation' });
  }
});

// Route pour r√©cup√©rer l'historique des conversations d'un utilisateur
router.get('/history/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    console.log('Attempting to fetch history for userId:', userId);
    
    // Utiliser la nouvelle m√©thode statique pour trouver les conversations
    const conversations = await Conversation.findByUserId(userId);
    
    console.log('Found', conversations.length, 'conversations for userId:', userId);
    res.status(200).json({ conversations });
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'historique:', error);
    res.status(500).json({ 
      error: 'Erreur lors de la r√©cup√©ration de l\'historique',
      details: error.message 
    });
  }
});

// Nouvelle route pour cr√©er une nouvelle conversation
router.post('/new', async (req, res) => {
  const { userId } = req.body;
  console.log('üÜï Requ√™te nouvelle conversation pour userId:', userId);

  if (!userId) {
    return res.status(400).json({ error: 'userId requis' });
  }

  try {
    const newConversation = new Conversation({
      userId: userId,
      title: 'Nouvelle conversation',
      messages: [{
        role: 'bot',
        text: 'Bonjour ! Je suis votre assistant de voyage. Comment puis-je vous aider ?',
        timestamp: new Date()
      }]
    });

    await newConversation.save();
    console.log('‚úÖ Nouvelle conversation cr√©√©e avec ID:', newConversation._id);

    res.status(200).json({ 
      success: true, 
      conversationId: newConversation._id, 
      userId: newConversation.userId 
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de la conversation:', error);
    res.status(500).json({ 
      error: 'Erreur lors de la cr√©ation de la conversation',
      details: error.message 
    });
  }
});

module.exports = router;